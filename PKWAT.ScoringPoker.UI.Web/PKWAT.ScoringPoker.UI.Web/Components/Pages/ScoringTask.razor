@page "/scoringTasks/{TaskId}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@using PKWAT.ScoringPoker.Contracts.LiveEstimation

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService

@implements IAsyncDisposable

<PageTitle>ScoringTask</PageTitle>

@if(StatusDto is null)
{
    <h1>Scoring task not found</h1>
    return;
}

<h1>Test Scoring task @StatusDto.ScoringTaskName</h1>

<h2>Current status: @StatusDto.ScoringTaskStatus</h2>
        
@if(StatusDto.CanBeStarted && IsOwner(UserName))
{
    <button type="button" class="btn btn-primary" @onclick="@(e => HandleStart())">Start</button>
}

@if (StatusDto.ScoringTaskStatusDueTo.HasValue)
{
    <p>Finish will be in @((StatusDto.ScoringTaskStatusDueTo.Value - DateTime.UtcNow).ToString(@"mm\:ss"))</p>
}

@if (StatusDto.CanAppendUserEstimation || (StatusDto.CanBeApprovedByOwner && IsOwner(UserName)))
{
    <h2>Possible values:</h2>

    @foreach (var value in StatusDto?.ScoringTaskEstimationMethodPossibleValues ?? [])
    {
        <button type="button" class="btn @(value.Id == ChosenEstimationOptionId ? "btn-primary" : "btn-info")" @onclick="@(e => HandleEstimate(value.Id))">@value.Name</button>
    }
}

@if(StatusDto.CanShowFinalEstimationValue)
{
    <h2>Final estimation value: @StatusDto?.ScoringTaskFinalValue</h2>
}

<br/>

Observers:

<ul>
    @foreach (var observer in StatusDto?.UsersEstimations ?? [])
    {
        <li>@observer.UserName @(StatusDto.CanShowUserEstimationValues ? observer.UserEstimation : observer.EstimationAdded ? "estimated" : "not estimated")</li>
    }
</ul>

Messages from the server:

<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string TaskId { get; set; }

    public string UserName { get; set; }

    public int? ChosenEstimationOptionId { get; set; }

    public LiveEstimationScoringTaskStatusDto? StatusDto { get; set; }

    private HubConnection? hubConnection;
    private readonly List<string> messages = new();

    private static System.Timers.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        var authenticatedState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticatedState?.User?.Identity?.IsAuthenticated is null or false)
        {
            NavigationManager.NavigateTo($"/login?return=scoringTasks%2F{TaskId}");
            return;
        }

        UserName = authenticatedState.User.Identity.Name ?? string.Empty;

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7173/liveEstimation",
            o => o.AccessTokenProvider = () => LocalStorageService.GetItemAsync<string?>("authToken").AsTask())
            .Build();


        hubConnection.On<string>("ReceiveNotification", message =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<LiveEstimationScoringTaskStatusDto>("ReceiveScoringTaskStatus", statusDto =>
        {
            StatusDto = statusDto;
            if (!statusDto.CanAppendUserEstimation)
            {
                ChosenEstimationOptionId = null;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("ObserveScoringTask", int.Parse(TaskId));

        refreshTimer = new System.Timers.Timer(1000);
        refreshTimer.Elapsed += async (sender, e) => await InvokeAsync(StateHasChanged);
        refreshTimer.Start();
    }

    private async Task HandleStart()
    {
        await hubConnection!.SendAsync("StartEstimating");
    }

    private async Task HandleEstimate(int optionId)
    {
        if (StatusDto.CanBeApprovedByOwner)
        {
            await hubConnection!.SendAsync("Estimate", optionId);
        }

        if (StatusDto.CanAppendUserEstimation)
        {
            await hubConnection!.SendAsync("AppendEstimation", optionId);
        }

        ChosenEstimationOptionId = optionId;
    }

    private bool IsOwner(string? userName)
    {
        return StatusDto is not null && StatusDto.ScoringTaskOwner == userName;
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        if(refreshTimer is not null)
        {
            refreshTimer.Dispose();
        }
    }

}
