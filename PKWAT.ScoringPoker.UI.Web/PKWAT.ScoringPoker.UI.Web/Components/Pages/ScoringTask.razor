@page "/scoringTasks/{TaskId}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@using PKWAT.ScoringPoker.Contracts.LiveEstimation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject ILocalStorageService LocalStorageService

@implements IAsyncDisposable

<PageTitle>ScoringTask</PageTitle>

<h1>Test Scoring task @StatusDto?.ScoringTaskName</h1>

<h2>Current status: @StatusDto?.ScoringTaskStatus</h2>

Messages from the server:

<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string TaskId { get; set; }

    public LiveEstimationScoringTaskStatusDto? StatusDto { get; set; }

    private HubConnection? hubConnection;
    private readonly List<string> messages = new();

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorageService.GetItemAsync<string?>("authToken");

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7173/liveEstimation",
            o => o.AccessTokenProvider = () => LocalStorageService.GetItemAsync<string?>("authToken").AsTask())
            .Build();


        hubConnection.On<string>("ReceiveNotification", message =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<LiveEstimationScoringTaskStatusDto>("ReceiveScoringTaskStatus", statusDto =>
        {
            StatusDto = statusDto;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("ObserveScoringTask", int.Parse(TaskId));
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
