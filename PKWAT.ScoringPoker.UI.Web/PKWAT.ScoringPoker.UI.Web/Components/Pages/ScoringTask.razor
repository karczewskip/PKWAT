@page "/scoringTasks/{TaskId}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@using PKWAT.ScoringPoker.Contracts.LiveEstimation

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService

@implements IAsyncDisposable

<PageTitle>ScoringTask</PageTitle>

@if(StatusDto is null)
{
    <h1>Scoring task not found</h1>
    return;
}

<div class="p-5 bg-body-tertiary rounded-3 separated">

    <h1>Task: @StatusDto.ScoringTaskName</h1>

    <h2>Status: @StatusDto.ScoringTaskStatus</h2>

    @if (StatusDto.ScoringTaskStatusDueTo.HasValue)
    {
        <p>Finish will be in @((StatusDto.ScoringTaskStatusDueTo.Value - DateTime.UtcNow).ToString(@"mm\:ss"))</p>
    }

    @if (StatusDto.CanAppendUserEstimation || (StatusDto.CanBeApprovedByOwner && IsOwner(UserName)))
    {
        <h2>Possible values:</h2>

        <div class="btn-group" role="group">
            @foreach (var value in StatusDto?.ScoringTaskEstimationMethodPossibleValues ?? [])
            {
                <button type="button" class="btn @(value.Id == ChosenEstimationOptionId ? "btn-primary" : "btn-secondary")" @onclick="@(e => HandleEstimate(value.Id))">@value.Name</button>
            }
        </div>
    }

    @if (StatusDto.CanShowFinalEstimationValue)
    {
        <h2>Final estimation: @StatusDto?.ScoringTaskFinalValue</h2>
    }

    @if (StatusDto.CanBeStarted && IsOwner(UserName))
    {
        <button id="start-estimation-button" type="button" class="btn btn-primary" @onclick="@(e => HandleStart())">Start estimation</button>
    }

</div>
<div class="p-5 bg-body-tertiary rounded-3 separated">
    <h2>Observers</h2>

    <ul class="list-group">
        @foreach (var observer in StatusDto?.UsersEstimations ?? [])
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @observer.UserName
                <span class="badge @(observer.EstimationAdded ? "text-bg-success" : "text-bg-primary") rounded-pill">@(StatusDto.CanShowUserEstimationValues ? observer.UserEstimation : observer.EstimationAdded ? "estimated" : "not estimated")</span>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public string TaskId { get; set; }

    public string UserName { get; set; }

    public int? ChosenEstimationOptionId { get; set; }

    public LiveEstimationScoringTaskStatusDto? StatusDto { get; set; }

    private HubConnection? hubConnection;

    private static System.Timers.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        var authenticatedState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticatedState?.User?.Identity?.IsAuthenticated is null or false)
        {
            NavigationManager.NavigateTo($"/login?return=scoringTasks%2F{TaskId}");
            return;
        }

        UserName = authenticatedState.User.Identity.Name ?? string.Empty;

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7173/liveEstimation",
            o => o.AccessTokenProvider = () => LocalStorageService.GetItemAsync<string?>("authToken").AsTask())
            .Build();

        hubConnection.On<LiveEstimationScoringTaskStatusDto>(nameof(ILiveEstimationClient.ReceiveScoringTaskStatus), statusDto =>
        {
            StatusDto = statusDto;
            if (!statusDto.CanAppendUserEstimation)
            {
                ChosenEstimationOptionId = null;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync(nameof(ILiveEstimationHub.ObserveScoringTask), int.Parse(TaskId));

        refreshTimer = new System.Timers.Timer(1000);
        refreshTimer.Elapsed += async (sender, e) => await InvokeAsync(StateHasChanged);
        refreshTimer.Start();
    }

    private async Task HandleStart()
    {
        await hubConnection!.SendAsync(nameof(ILiveEstimationHub.StartEstimating));
    }

    private async Task HandleEstimate(int optionId)
    {
        if (StatusDto.CanBeApprovedByOwner)
        {
            await hubConnection!.SendAsync(nameof(ILiveEstimationHub.Estimate), optionId);
        }

        if (StatusDto.CanAppendUserEstimation)
        {
            await hubConnection!.SendAsync(nameof(ILiveEstimationHub.AppendEstimation), optionId);
        }

        ChosenEstimationOptionId = optionId;
    }

    private bool IsOwner(string? userName)
    {
        return StatusDto is not null && StatusDto.ScoringTaskOwner == userName;
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        if(refreshTimer is not null)
        {
            refreshTimer.Dispose();
        }
    }

}
